name: "Auto Release on Version Change"

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

jobs:
  # Check if this is a version bump
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_version: ${{ steps.check.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ github.sha }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Check for version change
        id: check
        run: |
          # Get current version from package.json (source of truth)
          CURRENT_VERSION=$(node -pe "require('./package.json').version")
          echo "Current version from package.json: $CURRENT_VERSION"
          
          # Check if this tag already exists
          if git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
            echo "Tag v$CURRENT_VERSION already exists, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected: $CURRENT_VERSION"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

  # Sync version and create release
  create-release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.sha }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ needs.check-version.outputs.new_version }}";
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `Release v${version}`,
              body: `## What's Changed
            
            ### Downloads
            - **Windows**: Download the \`.msi\` installer
            - **macOS**: Download the \`.dmg\` file (Intel) or \`.app.tar.gz\` (Apple Silicon)  
            - **Linux**: Download the \`.AppImage\` or \`.deb\` package
            
            See the assets below to download and install this version.`,
              draft: false,
              prerelease: false
            });
            return data.id;

  # Build and upload assets
  build-tauri:
    needs: [check-version, create-release]
    if: needs.check-version.outputs.should_release == 'true'
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
            rust-targets: "aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
            rust-targets: "x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
            rust-targets: ""
          - platform: "windows-latest"
            args: ""
            rust-targets: ""

    runs-on: ${{ matrix.platform }}
    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-targets }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Verify version consistency
        run: |
          PACKAGE_VERSION=$(node -pe "require('./package.json').version")
          echo "Building version: $PACKAGE_VERSION"
          echo "Expected version: ${{ needs.check-version.outputs.new_version }}"
          if [ "$PACKAGE_VERSION" != "${{ needs.check-version.outputs.new_version }}" ]; then
            echo "❌ Version mismatch! Expected ${{ needs.check-version.outputs.new_version }}, got $PACKAGE_VERSION"
            exit 1
          fi
          echo "✅ Version verified: $PACKAGE_VERSION"

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}